name: Flutter CI/CD

# only run on tags in the format v.*.*.*
#
# git tag v1.0.1+2 && git push origin --tags
on: 
  push:
    tags:
    - 'v*.*.*'

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:

    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Java
      uses: actions/setup-java@v3
      with:
          java-version: '15'
          distribution: 'adopt'
    
    - name: Set up Flutter
      uses: subosito/flutter-action@v1
      with:
        flutter-version: '3.0.0'
        channel: 'stable'
        
    - name: ls1
      run: |
        ls  ~/
        ls  ~/runners/
        ls /usr/lib/android-sdk/
        ls /Library/Android/sdk/
        ls /Users/*/Library/Android/sdk/
    
    # get the dependencies listed in the pubspec.yaml
    - name: Install dependencies
      run: flutter pub get
    
    # replace the whitespace in your program with formatting that follows Dart guidelines
    # make the command have an exit code of 1 if any formatting changes occur
    #
    # https://dart.dev/tools/dart-format
    - name: Check for any formatting issues
      run: flutter format --set-exit-if-changed .
    
    # Exclude generated files in "analysis_optins.yaml" before analyzing.
    #
    # analyzer:
    #   exclude:
    #     - doc/**
    #     - lib/generated/**
    #     - playground/**
    #     - '**.freezed.dart'
    #     - '**.g.dart'
    - name: Statically analyze code
      run: flutter analyze .

    # generate missing files
    - name: Create generated files
      run: |
        # generate language files for https://marketplace.visualstudio.com/items?itemName=localizely.flutter-intl
        # https://github.com/localizely/flutter-intl-vscode/issues/85
        flutter pub run intl_utils:generate

        # run build_runner to generate ".g" and ".freezed" files
        dart run build_runner build
    
    # run tests
    - name: Run Tests
      run: flutter test

  build_android:
    needs: [tests]
    runs-on: ubuntu-latest
    steps:
    
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Java
      uses: actions/setup-java@v3
      with:
          java-version: '15'
          distribution: 'adopt'
    
    - name: Set up Flutter
      uses: subosito/flutter-action@v1
      with:
        flutter-version: '3.0.0'
        channel: 'stable'
        
    # get the dependencies listed in the pubspec.yaml
    - name: Install dependencies
      run: flutter pub get
    
    - name: Create generated files
      run: |
        # generate language files for https://marketplace.visualstudio.com/items?itemName=localizely.flutter-intl
        # https://github.com/localizely/flutter-intl-vscode/issues/85
        flutter pub run intl_utils:generate

        # run build_runner to generate ".g" and ".freezed" files
        dart run build_runner build

    # Builds and signes .apk and appbundle
    #
    # https://stackoverflow.com/questions/10930331/how-to-sign-an-already-compiled-apk
    - name: Build and sign android
      env:
        ANDROID_SIGNING_ALIAS: ${{ secrets.ANDROID_SIGNING_ALIAS }}
        ANDROID_SIGNING_KEYSTORE_PW: ${{ secrets.ANDROID_SIGNING_KEYSTORE_PW }}
        ANDROID_SIGNING_KEY: ${{ secrets.ANDROID_SIGNING_KEY }}
      run: |
        # create keystore
        mkdir -p "${RUNNER_TEMP}"/keystore
        echo "${ANDROID_SIGNING_KEY}" > "${RUNNER_TEMP}"/keystore/keystore.jks.base64
        base64 -d "${RUNNER_TEMP}"/keystore/keystore.jks.base64 > "${RUNNER_TEMP}"/keystore/keystore.jks

        # build .apk
        flutter build apk --release

        # ls
        ls /root/
        ls /root/Android/

        # align and sign .apk
        mkdir -p "${GITHUB_WORKSPACE}"/build/app/outputs/apk/release/aligned/
        mkdir -p "${GITHUB_WORKSPACE}"/build/app/outputs/apk/release/signed/
        ~/Android/sdk/build-tools/32.*/zipalign -p -f -v 4 "${GITHUB_WORKSPACE}"/build/app/outputs/apk/release/*.apk "${GITHUB_WORKSPACE}"/build/app/outputs/apk/release/aligned/aligned.apk
        ~/Android/sdk/build-tools/32.*/apksigner sign --out "${GITHUB_WORKSPACE}"/build/app/outputs/apk/release/signed/signed.apk --ks "${RUNNER_TEMP}"/keystore/keystore.jks --ks-key-alias "${ANDROID_SIGNING_ALIAS}" --ks-pass "pass:${ANDROID_SIGNING_KEYSTORE_PW}" "${GITHUB_WORKSPACE}"/build/app/outputs/apk/release/aligned/*.apk
        ~/Android/sdk/build-tools/32.*/apksigner verify -v -v4-signature-file "${GITHUB_WORKSPACE}"/build/app/outputs/apk/release/signed/*.idsig "${GITHUB_WORKSPACE}"/build/app/outputs/apk/release/signed/*.apk
        
        # create appbundle
        flutter build appbundle

        # sign appbundle
        mkdir -p "${GITHUB_WORKSPACE}"/build/app/outputs/bundle/release/signed
        ~/Android/sdk/build-tools/32.*/apksigner sign --out "${GITHUB_WORKSPACE}"/build/app/outputs/bundle/release/signed/signed.aab --ks "${RUNNER_TEMP}"/keystore/keystore.jks --ks-key-alias "${ANDROID_SIGNING_ALIAS}" --ks-pass "pass:${ANDROID_SIGNING_KEYSTORE_PW}" --min-sdk-version 26 "${GITHUB_WORKSPACE}"/build/app/outputs/bundle/release/*.aab

    
    - name: Archive code coverage results
      uses: actions/upload-artifact@v3
      with:
        path: |
          build/app/outputs/apk/release/signed/*.apk,
          build/app/outputs/apk/release/signed/*.idsig,
          build/app/outputs/bundle/release/signed/*.aab,
          build/app/outputs/bundle/release/signed/*.idsig

  build_ios:
    needs: [tests]
    runs-on: macos-latest
    steps:

    # save the current tag as environment variable
    #
    # https://stackoverflow.com/questions/58177786/get-the-current-pushed-tag-in-github-actions
    - name: Set environment variables
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
    
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Java
      uses: actions/setup-java@v3
      with:
          java-version: '15'
          distribution: 'adopt'
    
    - name: Set up Flutter
      uses: subosito/flutter-action@v1
      with:
        flutter-version: '3.0.0'
        channel: 'stable'
        
    # get the dependencies listed in the pubspec.yaml
    - name: Install dependencies
      run: flutter pub get

    # generate missing files
    - name: Create generated files
      run: |
        # generate language files for https://marketplace.visualstudio.com/items?itemName=localizely.flutter-intl
        # https://github.com/localizely/flutter-intl-vscode/issues/85
        flutter pub run intl_utils:generate

        # run build_runner to generate ".g" and ".freezed" files
        dart run build_runner build

    # Resources:
    # https://docs.github.com/en/actions/deployment/deploying-xcode-applications/installing-an-apple-certificate-on-macos-runners-for-xcode-development
    - name: Install the Apple certificate and provisioning profile
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.IOS_CERTIFICATE_BASE64_PW }}
        BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # create variables
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

        # import certificate and provisioning profile from secrets
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
        echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

        # create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

        # import certificate to keychain
        security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH

        # apply provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

    # Resources:
    # https://stackoverflow.com/questions/5160863/how-to-re-sign-the-ipa-file
    - name: Build and sign iOS
      run: |
        # build app
        flutter build ios --no-codesign --release
        cd build/ios/iphoneos

        # remove the old code signature files
        rm -rf Runner.app/_CodeSignature
        # replace the existing provisioning profile
        cp ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision Runner.app/embedded.mobileprovision
        
        # sign app (optional: --entitlements entitlements.plist) with "Common Name" of the certificate
        codesign -s "workflow_test" Runner.app

        # resign all frameworks (optional: --entitlements entitlements.plist) with "Common Name" of the certificate
        codesign -f -s "workflow_test" Runner.app/Frameworks/*

        # zip app to ipa
        mkdir Payload
        cd Payload
        ln -s ../Runner.app
        cd ..
        zip -r signed.ipa Payload
        echo "done"

    - name: Archive code coverage results
      uses: actions/upload-artifact@v3
      with:
        name: signed.ipa
        path: build/ios/iphoneos/*.ipa


  publish_releases:
    needs: [tests, build_android, build_ios]
    runs-on: ubuntu-latest
    steps:

    - name: Download all workflow run artifacts
      uses: actions/download-artifact@v3
      with:
        path: ~/

    - name: Create GitHub release with artifacts
      uses: ncipollo/release-action@v1
      with:
        artifacts: "
        ~/*.apk,
        ~/*.apk.idsig,
        ~/*.aab,
        ~/*.aab.idsig,
        ~/*.ipa 
        "
        token: ${{ secrets.GITHUB_TOKEN }}


    # - name: Prepare files for ftp upload
    #   run: |
    #     mkdir upload
    #     cp build/app/outputs/apk/release/*.apk upload/
    #     cp build/ios/iphoneos/app.ipa upload/
    #     cp CHANGELOG.md upload/

    # - name: Sync files to ftp server
    #   uses: SamKirkland/FTP-Deploy-Action@4.1.0
    #   with:
    #     server: ftp.hidrive.strato.com
    #     username: ${{ secrets.FTP_USER }}
    #     password: ${{ secrets.FTP_PW }}
    #     local-dir: upload/
    #     server-dir: /users/esys-hdrive/Daniel/workflows/${{ env.RELEASE_VERSION }}/

    # - name: Send mail
    #   uses: satak/webrequest-action@master
    #   with:
    #     url: https://relay.esys.eu/v1/SendMail
    #     method: POST
    #     payload: '{"from": "daniel@esys.de", "recipients": ["daniel@esys.de"], "subject": "Workflow-App ${{ env.RELEASE_VERSION }}", "textBody": "", "htmlBody": "Version ${{ env.RELEASE_VERSION }} of the Workflow-App is availible at the following Link: https://my.hidrive.com/share/xohhlsmq-x"}'
    #     headers: '{"apiKey": "${{ secrets.MAIL_API_KEY }}"}'